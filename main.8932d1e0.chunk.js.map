{"version":3,"sources":["Components/NavBar.js","Components/GlobalStats.js","Components/AllCountries.js","Components/Graphs.js","Components/InfoPanel.js","Components/FootNav.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","title","display","textAlign","breakpoints","up","NavBar","classes","className","AppBar","position","appBar","Toolbar","Typography","variant","noWrap","maxWidth","margin","marginTop","paper","padding","spacing","color","palette","text","secondary","textTransform","GlobalStats","useState","globalData","setGlobalData","useEffect","a","fetch","response","json","data","results","source","console","log","getData","Grid","container","Object","keys","map","key","ind","item","xs","sm","Paper","elevation","replace","AllCountries","values","countryitems","ourid","total_cases","total_active_cases","total_deaths","total_new_cases_today","total_new_deaths_today","total_recovered","total_serious_cases","total_unresolved","Graphs","lineData","labels","eachData","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","InfoPanel","currentScreen","bottom","right","left","FootNav","screenConfig","BottomNavigation","value","onChange","event","newValue","showLabels","BottomNavigationAction","icon","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8932d1e0.chunk.js","sourcesContent":["import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport {  makeStyles } from '@material-ui/core/styles';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  \n  title: {\n    flexGrow: 1,\n    display: 'none',\n    textAlign: 'center',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n  },\n  \n}));\n\nexport default function NavBar() {\n\n  \n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" className={classes.appBar}>\n        <Toolbar>\n          <Typography className={classes.title} variant=\"h4\" noWrap>\n            Covid-19 Tracker\n          </Typography>\n          \n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}","import React, {useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    maxWidth: 1000,\n    margin: '0 auto',\n    marginTop: 50\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  title:{\n    color: '#3f51b5',\n    textTransform: 'uppercase'\n  }\n}));\n\nexport default function GlobalStats() {\n  const [globalData, setGlobalData] = useState({});\n  \n  useEffect(()=>{\n    async function getData(){\n      const response = await fetch(\"https://api.thevirustracker.com/free-api?global=stats\");\n      let data = await response.json();\n      delete data.results[0].source;\n      setGlobalData(data.results[0]);\n      console.log(data.results[0]);\n    }\n    getData();\n  },[])\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3}>\n        {Object.keys(globalData).map((key, ind) => {\n          return(\n            <Grid item xs={12} sm={4} key={ind} >\n              <Paper \n                  className={classes.paper}\n                  elevation={3}>\n                   <h3 className={classes.title}>\n                     {key.replace(/_/g,' ')}</h3>\n                   <h3>{globalData[key]}</h3>\n              </Paper>\n          </Grid>  \n          )\n        })}\n        \n      </Grid>\n    </div>\n  );\n}","import React, {useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    maxWidth: 1000,\n    margin: '0 auto',\n    marginTop: 50\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  title:{\n    color: '#3f51b5',\n    textTransform: 'uppercase'\n  }\n}));\n\nexport default function AllCountries() {\n  const [globalData, setGlobalData] = useState([{}]);\n  \n  useEffect(()=>{\n    async function getData(){\n      const response = await fetch(\"https://api.thevirustracker.com/free-api?countryTotals=ALL\");\n      let data = await response.json();\n      \n      setGlobalData(Object.values(Object.values(data.countryitems)[0]));\n      console.log(Object.values(Object.values(data.countryitems)[0]));\n    }\n    getData();\n  },[])\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <table>\n         <thead>\n             <tr>\n               <th>Number of Country</th>\n               <th>Country Name</th>\n               <th>Total Cases</th>\n               <th>Active Cases</th>\n               <th>Total Deaths</th>\n               <th>New Cases Today</th>\n               <th>New Deaths Today</th>\n               <th>Recovered</th>\n               <th>Serious Caese</th>\n               <th>Unresolved</th>\n              \n             </tr>\n         </thead>\n        {globalData.map((key, ind) => {\n          return(\n         <tbody>\n            <tr>\n                <td>\n                  {globalData[ind].ourid}\n                </td> \n                <td>\n                  {globalData[ind].title}\n                </td> \n                <td>\n                   {globalData[ind].total_cases}\n                </td> \n                <td>\n                   {globalData[ind].total_active_cases}\n                </td> \n                <td>\n                  {globalData[ind].total_deaths}\n                </td>\n                <td>\n                  {globalData[ind].total_new_cases_today}\n                </td>\n                <td>\n                  {globalData[ind].total_new_deaths_today}\n                </td>\n                <td>\n                  {globalData[ind].total_recovered}\n                </td>\n                <td>\n                  {globalData[ind].total_serious_cases}\n                </td> \n                <td>\n                  {globalData[ind].total_unresolved}\n                </td>\n            </tr>       \n          </tbody>       \n         )\n          \n     })}\n      </table>\n    </div>\n   \n  );\n}","import React, { useEffect, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\n\nexport default function Graphs() {\n  const [globalData, setGlobalData] = useState([{}]);\n  \n  useEffect(()=>{\n    async function getData(){\n      const response = await fetch(\"https://api.thevirustracker.com/free-api?countryTotals=ALL\");\n      let data = await response.json();\n      \n      setGlobalData(Object.values(Object.values(data.countryitems)[0]));\n      console.log(Object.values(Object.values(data.countryitems)[0]));\n    }\n    getData();\n  },[])\n  const lineData = {\n    labels: globalData.map((eachData) => eachData.total_cases),\n    datasets: [\n      {\n        label: \"Total Cases\",\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: \"rgba(75,192,192,0.4)\",\n        borderColor: \"#ce0064\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgba(75,192,192,1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: globalData.map((eachData) => eachData.total_cases),\n      },\n      {\n        label: \"Active Cases\",\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: \"rgba(75,192,192,0.4)\",\n        borderColor: \"#7318B4\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgba(75,192,192,1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: globalData.map((eachData) => eachData.total_active_cases),\n      },\n      {\n        label: \"Deaths\",\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: \"rgba(75,192,192,0.4)\",\n        borderColor: \"red\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgba(75,192,192,1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: globalData.map((eachData) => eachData.total_deaths),\n      },\n      // {\n      //   label: \"New Cases Today\",\n      //   fill: false,\n      //   lineTension: 0.1,\n      //   backgroundColor: \"rgba(75,192,192,0.4)\",\n      //   borderColor: \"orange\",\n      //   borderCapStyle: \"butt\",\n      //   borderDash: [],\n      //   borderDashOffset: 0.0,\n      //   borderJoinStyle: \"miter\",\n      //   pointBorderColor: \"rgba(75,192,192,1)\",\n      //   pointBackgroundColor: \"#fff\",\n      //   pointBorderWidth: 1,\n      //   pointHoverRadius: 5,\n      //   pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n      //   pointHoverBorderColor: \"rgba(220,220,220,1)\",\n      //   pointHoverBorderWidth: 2,\n      //   pointRadius: 1,\n      //   pointHitRadius: 10,\n      //   data: globalData.map((eachData) => eachData.total_new_cases_today),\n      // },\n      // {\n      //   label: \"New Deaths Today\",\n      //   fill: false,\n      //   lineTension: 0.1,\n      //   backgroundColor: \"rgba(75,192,192,0.4)\",\n      //   borderColor: \"red\",\n      //   borderCapStyle: \"butt\",\n      //   borderDash: [],\n      //   borderDashOffset: 0.0,\n      //   borderJoinStyle: \"miter\",\n      //   pointBorderColor: \"rgba(75,192,192,1)\",\n      //   pointBackgroundColor: \"#fff\",\n      //   pointBorderWidth: 1,\n      //   pointHoverRadius: 5,\n      //   pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n      //   pointHoverBorderColor: \"rgba(220,220,220,1)\",\n      //   pointHoverBorderWidth: 2,\n      //   pointRadius: 1,\n      //   pointHitRadius: 10,\n      //   data: globalData.map((eachData) => eachData.total_new_deaths_today),\n      // },\n      {\n        label: \"Total Recovered\",\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: \"rgba(75,192,192,0.4)\",\n        borderColor: \"Yellow\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgba(75,192,192,1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: globalData.map((eachData) => eachData.total_recovered),\n      },\n    ],\n  };\n\n  \n\n  return (\n   \n      <div className=\"lineChart\">\n        <Line data={lineData} />\n      </div>\n      \n    \n  );\n};\n\n","import React from 'react';\nimport GlobalStats from './GlobalStats';\nimport AllCountries from './AllCountries';\nimport Graphs from './Graphs';\n\n\nexport default function InfoPanel({currentScreen}) {\n  if(currentScreen === 0)\n   return  <GlobalStats />\n  else if(currentScreen === 1)\n   return <AllCountries />\n  else if(currentScreen === 2)\n   return<Graphs />\n  \n} \n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport RestoreIcon from '@material-ui/icons/Restore';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\n\nconst useStyles = makeStyles({\n  root: {\n    \n    bottom: 0,\n    right: 0,\n    left: 0,\n    \n\n  },\n});\n\nexport default function FootNav({screenConfig}) {\n  const classes = useStyles();\n  \n  return (\n    <BottomNavigation\n      value={ screenConfig[0]}\n      onChange={(event, newValue) => {\n          console.log(newValue);\n         screenConfig[1](newValue);\n      }}\n      showLabels\n      className={classes.root}\n    >\n      <BottomNavigationAction label=\"Global Stats\" icon={<RestoreIcon />} />\n      <BottomNavigationAction label=\"Country Stats\" icon={<FavoriteIcon />} />\n      <BottomNavigationAction label=\"Graphs\" icon={<LocationOnIcon />} />\n    </BottomNavigation>\n  );\n}","import React, {useState} from 'react';\nimport NavBar from './Components/NavBar';\nimport InfoPanel from './Components/InfoPanel'\nimport FootNav from './Components/FootNav';\nimport './App.css';\n\nfunction App() {\n  const screenConfig = useState(0);\n\n  return (\n    <div>\n      <NavBar />\n      <InfoPanel currentScreen={screenConfig[0]}/>\n      <FootNav screenConfig={screenConfig} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}